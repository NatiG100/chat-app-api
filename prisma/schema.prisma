// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status{
  INACTIVE
  ACTIVE
  SUSPENDED
}

model User{
  id Int @id @default(autoincrement())
  firstName String
  lastName String?
  username String @unique
  phoneNumber String @unique
  profileImg String?
  hash String
  salt String
  status Status @default(INACTIVE)
  asSuperAdmin Group[]
  asMember UserGroup[]
  asAdmin AdminGroup[]
  messages Message[]
  asUser1 Chat[] @relation("user1")
  asUser2 Chat[] @relation("user2")
}

model Group{
  id Int @id @default(autoincrement())
  name String @unique
  description String?
  link String @unique
  profileImg String?
  superAdmin User @relation(fields: [superAdminId],references: [id])
  superAdminId Int
  members UserGroup[]
  admins AdminGroup[]
  chat Chat?
}

model UserGroup{
  @@id([userId,groupId])
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  group Group @relation(fields: [groupId],references: [id],onDelete: Cascade)
  groupId Int
  blocked Boolean @default(false)
}


model AdminGroup{
  @@id([userId,groupId])
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  group Group @relation(fields: [groupId],references: [id],onDelete: Cascade)
  groupId Int
  permissions UserGroupPermission[]
}
model Permission{
  id Int @id @default(autoincrement())
  value String
  adminGroup UserGroupPermission[]
}

model UserGroupPermission{
  @@id([userId,groupId,permissionId])
  adminGroup AdminGroup @relation(fields: [userId,groupId],references: [userId,groupId],onDelete: Cascade)
  userId Int
  groupId Int
  permission Permission @relation(fields: [permissionId],references: [id],onDelete: Cascade)
  permissionId Int
}

model Chat{
  id Int @id @default(autoincrement())
  group Group? @relation(fields: [groupId],references: [id])
  groupId Int? @unique
  messages Message[]
  user1 User? @relation("user1",fields: [user1Id],references: [id])
  user1Id Int?
  user2 User? @relation("user2", fields: [user2Id],references: [id])
  user2Id Int?
}


enum MessageType{
  TEXT
  AUDIO 
  VIDEO
}
model Message{
  id Int @id @default(autoincrement())
  user User @relation(fields: [senderId],references: [id])
  senderId Int
  chat Chat @relation(fields: [chatId],references: [id],onDelete: Cascade)
  chatId Int
  timeStamp DateTime
  updatedAt DateTime?
  text String
  image String?
  video String?
  audio String?
  type MessageType @default(TEXT)
  seen Boolean @default(false)
}